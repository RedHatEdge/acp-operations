---
apiVersion: v1
kind: ConfigMap
metadata:
  name: windows10-autounattend
  namespace: windows-virtualization-setup
  annotations:
    argocd.argoproj.io/sync-wave: "1"
data:
  Autounattend.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
        <!--https://schneegans.de/windows/unattend-generator/?LanguageMode=Unattended&UILanguage=en-US&Locale=en-US&Keyboard=00000409&GeoLocation=244&ProcessorArchitecture=amd64&BypassRequirementsCheck=true&ComputerNameMode=Random&TimeZoneMode=Explicit&TimeZone=Central+Standard+Time&PartitionMode=Unattended&PartitionLayout=GPT&EspSize=300&RecoveryMode=Partition&RecoverySize=1000&WindowsEditionMode=Unattended&WindowsEdition=pro&UserAccountMode=Unattended&AccountName0=Ansible&AccountPassword0=R3dh4t123%21&AccountGroup0=Administrators&AccountName1=&AccountName2=&AccountName3=&AccountName4=&AutoLogonMode=Builtin&BuiltinAdministratorPassword=R3dh4t123%21&PasswordExpirationMode=Unlimited&LockoutMode=Default&HideFiles=Hidden&WifiMode=Skip&ExpressSettings=DisableAll&Remove3DViewer=true&RemoveBingSearch=true&RemoveCalculator=true&RemoveCamera=true&RemoveClipchamp=true&RemoveClock=true&RemoveCopilot=true&RemoveCortana=true&RemoveDevHome=true&RemoveFamily=true&RemoveFeedbackHub=true&RemoveGetHelp=true&RemoveInternetExplorer=true&RemoveMailCalendar=true&RemoveMaps=true&RemoveMathInputPanel=true&RemoveZuneVideo=true&RemoveNews=true&RemoveNotepadClassic=true&RemoveNotepad=true&RemoveOffice365=true&RemoveOneDrive=true&RemoveOneNote=true&RemoveOpenSSHClient=true&RemoveOutlook=true&RemovePaint=true&RemovePaint3D=true&RemovePeople=true&RemovePhotos=true&RemovePowerAutomate=true&RemovePowerShellISE=true&RemoveQuickAssist=true&RemoveSkype=true&RemoveSnippingTool=true&RemoveSolitaire=true&RemoveStepsRecorder=true&RemoveStickyNotes=true&RemoveTeams=true&RemoveGetStarted=true&RemoveToDo=true&RemoveVoiceRecorder=true&RemoveWeather=true&RemoveWindowsMediaPlayer=true&RemoveZuneMusic=true&RemoveWindowsTerminal=true&RemoveWordPad=true&RemoveXboxApps=true&RemoveYourPhone=true&FirstLogonScript0=F%3A%5Cpost-install.ps1&FirstLogonScriptType0=Ps1&WdacMode=Skip-->
        <settings pass="windowsPE">
            <component xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Microsoft-Windows-PnpCustomizationsWinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <DriverPaths>
                    <PathAndCredentials wcm:action="add" wcm:keyValue="1">
                        <Path>E:\viostor\w10\amd64</Path>
                    </PathAndCredentials>
                    <PathAndCredentials wcm:action="add" wcm:keyValue="3">
                        <Path>E:\viorng\w10\amd64</Path>
                    </PathAndCredentials>
                </DriverPaths>
            </component>
            <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <SetupUILanguage>
                    <UILanguage>en-US</UILanguage>
                </SetupUILanguage>
                <InputLocale>0409:00000409</InputLocale>
                <SystemLocale>en-US</SystemLocale>
                <UILanguage>en-US</UILanguage>
                <UserLocale>en-US</UserLocale>
            </component>
            <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <DiskConfiguration>
                    <Disk wcm:action="add">
                        <CreatePartitions>
                            <CreatePartition wcm:action="add">
                                <Order>1</Order>
                                <Type>Primary</Type>
                                <Size>100</Size>
                            </CreatePartition>
                            <CreatePartition wcm:action="add">
                                <Extend>true</Extend>
                                <Order>2</Order>
                                <Type>Primary</Type>
                            </CreatePartition>
                        </CreatePartitions>
                        <ModifyPartitions>
                            <ModifyPartition wcm:action="add">
                                <Active>true</Active>
                                <Format>NTFS</Format>
                                <Label>System Reserved</Label>
                                <Order>1</Order>
                                <PartitionID>1</PartitionID>
                                <TypeID>0x27</TypeID>
                            </ModifyPartition>
                            <ModifyPartition wcm:action="add">
                                <Active>true</Active>
                                <Format>NTFS</Format>
                                <Label>OS</Label>
                                <Letter>C</Letter>
                                <Order>2</Order>
                                <PartitionID>2</PartitionID>
                            </ModifyPartition>
                        </ModifyPartitions>
                        <DiskID>0</DiskID>
                        <WillWipeDisk>true</WillWipeDisk>
                    </Disk>
                </DiskConfiguration>
                <ImageInstall>
                    <OSImage>
                        <InstallTo>
                            <DiskID>0</DiskID>
                            <PartitionID>2</PartitionID>
                        </InstallTo>
                        <InstallToAvailablePartition>false</InstallToAvailablePartition>
                    </OSImage>
                </ImageInstall>
                <UserData>
                    <AcceptEula>true</AcceptEula>
                    <FullName>Administrator</FullName>
                    <Organization></Organization>
                    <ProductKey>
                        <Key>{{ .Values.productKeys.windows10 }}</Key>
                    </ProductKey>
                </UserData>
                <RunSynchronous>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>1</Order>
                        <Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassTPMCheck /t REG_DWORD /d 1 /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>2</Order>
                        <Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassSecureBootCheck /t REG_DWORD /d 1 /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>3</Order>
                        <Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassRAMCheck /t REG_DWORD /d 1 /f</Path>
                    </RunSynchronousCommand>
                </RunSynchronous>
            </component>
        </settings>
        <settings pass="offlineServicing">
            <component name="Microsoft-Windows-LUA-Settings" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <EnableLUA>false</EnableLUA>
            </component>
        </settings>
        <settings pass="generalize">
            <component name="Microsoft-Windows-Security-SPP" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <SkipRearm>1</SkipRearm>
            </component>
        </settings>
        <settings pass="specialize">
            <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <RunSynchronous>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>1</Order>
                        <Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>2</Order>
                        <Path>reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Runonce" /v "UninstallCopilot" /t REG_SZ /d "powershell.exe -NoProfile -Command \"Get-AppxPackage -Name 'Microsoft.Windows.Ai.Copilot.Provider' | Remove-AppxPackage;\"" /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>3</Order>
                        <Path>reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\WindowsCopilot" /v TurnOffWindowsCopilot /t REG_DWORD /d 1 /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>4</Order>
                        <Path>reg.exe unload "HKU\DefaultUser"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>5</Order>
                        <Path>reg.exe delete "HKLM\SOFTWARE\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate" /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>6</Order>
                        <Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>7</Order>
                        <Path>reg.exe add "HKU\DefaultUser\Software\Microsoft\Notepad" /v ShowStoreBanner /t REG_DWORD /d 0 /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>8</Order>
                        <Path>reg.exe unload "HKU\DefaultUser"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>9</Order>
                        <Path>cmd.exe /c "del "C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk""</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>10</Order>
                        <Path>cmd.exe /c "del "C:\Windows\System32\OneDriveSetup.exe""</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>11</Order>
                        <Path>cmd.exe /c "del "C:\Windows\SysWOW64\OneDriveSetup.exe""</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>12</Order>
                        <Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>13</Order>
                        <Path>reg.exe delete "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Run" /v OneDriveSetup /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>14</Order>
                        <Path>reg.exe unload "HKU\DefaultUser"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>15</Order>
                        <Path>reg.exe delete "HKLM\SOFTWARE\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate" /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>16</Order>
                        <Path>reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v ConfigureChatAutoInstall /t REG_DWORD /d 0 /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>17</Order>
                        <Path>powershell.exe -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>18</Order>
                        <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Temp\remove-packages.ps1' -Raw | Invoke-Expression;"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>19</Order>
                        <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Temp\remove-caps.ps1' -Raw | Invoke-Expression;"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>20</Order>
                        <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Temp\remove-features.ps1' -Raw | Invoke-Expression;"</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>21</Order>
                        <Path>reg.exe add "HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v ConfigureStartPins /t REG_SZ /d "{ \"pinnedList\": [] }" /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>22</Order>
                        <Path>reg.exe add "HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v ConfigureStartPins_ProviderSet /t REG_DWORD /d 1 /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>23</Order>
                        <Path>reg.exe add "HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v ConfigureStartPins_WinningProvider /t REG_SZ /d B5292708-1619-419B-9923-E5D9F3925E71 /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>24</Order>
                        <Path>reg.exe add "HKLM\SOFTWARE\Microsoft\PolicyManager\providers\B5292708-1619-419B-9923-E5D9F3925E71\default\Device\Start" /v ConfigureStartPins /t REG_SZ /d "{ \"pinnedList\": [] }" /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>25</Order>
                        <Path>reg.exe add "HKLM\SOFTWARE\Microsoft\PolicyManager\providers\B5292708-1619-419B-9923-E5D9F3925E71\default\Device\Start" /v ConfigureStartPins_LastWrite /t REG_DWORD /d 1 /f</Path>
                    </RunSynchronousCommand>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>26</Order>
                        <Path>net.exe accounts /maxpwage:UNLIMITED</Path>
                    </RunSynchronousCommand>
                </RunSynchronous>
            </component>
            <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <TimeZone>Central Standard Time</TimeZone>
            </component>
        </settings>
        <settings pass="auditSystem"></settings>
        <settings pass="auditUser"></settings>
        <settings pass="oobeSystem">
            <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <InputLocale>0409:00000409</InputLocale>
                <SystemLocale>en-US</SystemLocale>
                <UILanguage>en-US</UILanguage>
                <UserLocale>en-US</UserLocale>
            </component>
            <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <UserAccounts>
                    <AdministratorPassword>
                        <Value>{{ .Values.defaultAdminPassword }}</Value>
                        <PlainText>true</PlainText>
                    </AdministratorPassword>
                    <LocalAccounts>
                        <LocalAccount wcm:action="add">
                            <Name>Ansible</Name>
                            <Group>Administrators</Group>
                            <Password>
                                <Value>{{ .Values.defaultAdminPassword }}</Value>
                                <PlainText>true</PlainText>
                            </Password>
                        </LocalAccount>
                    </LocalAccounts>
                </UserAccounts>
                <AutoLogon>
                    <Username>Administrator</Username>
                    <Enabled>true</Enabled>
                    <LogonCount>1</LogonCount>
                    <Password>
                        <Value>{{ .Values.defaultAdminPassword }}</Value>
                        <PlainText>true</PlainText>
                    </Password>
                </AutoLogon>
                <OOBE>
                    <ProtectYourPC>3</ProtectYourPC>
                    <HideEULAPage>true</HideEULAPage>
                    <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
                </OOBE>
                <FirstLogonCommands>
                    <SynchronousCommand wcm:action="add">
                        <Order>1</Order>
                        <CommandLine>reg.exe add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoLogonCount /t REG_DWORD /d 0 /f</CommandLine>
                    </SynchronousCommand>
                    <SynchronousCommand wcm:action="add">
                        <Order>2</Order>
                        <Description>Run post-install tasks</Description>
                        <RequiresUserInput>false</RequiresUserInput>
                        <CommandLine>powershell -ExecutionPolicy Bypass -NoProfile F:\post-install.ps1</CommandLine>
                    </SynchronousCommand>
                </FirstLogonCommands>
            </component>
        </settings>
        <Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
            <ExtractScript>
    param(
        [xml] $Document
    );

    $scriptsDir = 'C:\Windows\Setup\Scripts\';
    foreach( $file in $Document.unattend.Extensions.File ) {
        $path = [System.Environment]::ExpandEnvironmentVariables(
            $file.GetAttribute( 'path' )
        );
        if( $path.StartsWith( $scriptsDir ) ) {
            mkdir -Path $scriptsDir -ErrorAction 'SilentlyContinue';
        }
        $encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
            { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
            { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ); }
            default { [System.Text.Encoding]::Default; }
        };
        [System.IO.File]::WriteAllBytes( $path, ( $encoding.GetPreamble() + $encoding.GetBytes( $file.InnerText.Trim() ) ) );
    }
            </ExtractScript>
            <File path="C:\Windows\Temp\remove-packages.ps1">
    $selectors = @(
        'Microsoft.Microsoft3DViewer';
        'Microsoft.BingSearch';
        'Microsoft.WindowsCalculator';
        'Microsoft.WindowsCamera';
        'Clipchamp.Clipchamp';
        'Microsoft.WindowsAlarms';
        'Microsoft.549981C3F5F10';
        'Microsoft.Windows.DevHome';
        'MicrosoftCorporationII.MicrosoftFamily';
        'Microsoft.WindowsFeedbackHub';
        'Microsoft.GetHelp';
        'Microsoft.Getstarted';
        'microsoft.windowscommunicationsapps';
        'Microsoft.WindowsMaps';
        'Microsoft.BingNews';
        'Microsoft.WindowsNotepad';
        'Microsoft.MicrosoftOfficeHub';
        'Microsoft.Office.OneNote';
        'Microsoft.OutlookForWindows';
        'Microsoft.Paint';
        'Microsoft.MSPaint';
        'Microsoft.People';
        'Microsoft.Windows.Photos';
        'Microsoft.PowerAutomateDesktop';
        'MicrosoftCorporationII.QuickAssist';
        'Microsoft.SkypeApp';
        'Microsoft.ScreenSketch';
        'Microsoft.MicrosoftSolitaireCollection';
        'Microsoft.MicrosoftStickyNotes';
        'MSTeams';
        'Microsoft.Todos';
        'Microsoft.WindowsSoundRecorder';
        'Microsoft.BingWeather';
        'Microsoft.WindowsTerminal';
        'Microsoft.Xbox.TCUI';
        'Microsoft.XboxApp';
        'Microsoft.XboxGameOverlay';
        'Microsoft.XboxGamingOverlay';
        'Microsoft.XboxIdentityProvider';
        'Microsoft.XboxSpeechToTextOverlay';
        'Microsoft.GamingApp';
        'Microsoft.YourPhone';
        'Microsoft.ZuneMusic';
        'Microsoft.ZuneVideo';
    );
    $getCommand = { Get-AppxProvisionedPackage -Online; };
    $filterCommand = { $_.DisplayName -eq $selector; };
    $removeCommand = {
    [CmdletBinding()]
    param(
        [Parameter( Mandatory, ValueFromPipeline )]
        $InputObject
    );
    process {
        $InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
    }
    };
    $type = 'Package';
    $logfile = 'C:\Windows\Temp\remove-packages.log';
    &amp; {
        $installed = &amp; $getCommand;
        foreach( $selector in $selectors ) {
            $result = [ordered] @{
                Selector = $selector;
            };
            $found = $installed | Where-Object -FilterScript $filterCommand;
            if( $found ) {
                $result.Output = $found | &amp; $removeCommand;
                if( $? ) {
                    $result.Message = "$type removed.";
                } else {
                    $result.Message = "$type not removed.";
                    $result.Error = $Error[0];
                }
            } else {
                $result.Message = "$type not installed.";
            }
            $result | ConvertTo-Json -Depth 3 -Compress;
        }
    } *&gt;&amp;1 &gt;&gt; $logfile;
            </File>
            <File path="C:\Windows\Temp\remove-caps.ps1">
    $selectors = @(
        'Browser.InternetExplorer';
        'MathRecognizer';
        'Microsoft.Windows.Notepad';
        'OpenSSH.Client';
        'Microsoft.Windows.MSPaint';
        'Microsoft.Windows.PowerShell.ISE';
        'App.Support.QuickAssist';
        'Microsoft.Windows.SnippingTool';
        'App.StepsRecorder';
        'Media.WindowsMediaPlayer';
        'Microsoft.Windows.WordPad';
    );
    $getCommand = { Get-WindowsCapability -Online; };
    $filterCommand = { ($_.Name -split '~')[0] -eq $selector; };
    $removeCommand = {
    [CmdletBinding()]
    param(
        [Parameter( Mandatory, ValueFromPipeline )]
        $InputObject
    );
    process {
        $InputObject | Remove-WindowsCapability -Online -ErrorAction 'Continue';
    }
    };
    $type = 'Capability';
    $logfile = 'C:\Windows\Temp\remove-caps.log';
    &amp; {
        $installed = &amp; $getCommand;
        foreach( $selector in $selectors ) {
            $result = [ordered] @{
                Selector = $selector;
            };
            $found = $installed | Where-Object -FilterScript $filterCommand;
            if( $found ) {
                $result.Output = $found | &amp; $removeCommand;
                if( $? ) {
                    $result.Message = "$type removed.";
                } else {
                    $result.Message = "$type not removed.";
                    $result.Error = $Error[0];
                }
            } else {
                $result.Message = "$type not installed.";
            }
            $result | ConvertTo-Json -Depth 3 -Compress;
        }
    } *&gt;&amp;1 &gt;&gt; $logfile;
            </File>
            <File path="C:\Windows\Temp\remove-features.ps1">
    $selectors = @(
        'Microsoft-SnippingTool';
    );
    $getCommand = { Get-WindowsOptionalFeature -Online; };
    $filterCommand = { $_.FeatureName -eq $selector; };
    $removeCommand = {
    [CmdletBinding()]
    param(
        [Parameter( Mandatory, ValueFromPipeline )]
        $InputObject
    );
    process {
        $InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction 'Continue';
    }
    };
    $type = 'Feature';
    $logfile = 'C:\Windows\Temp\remove-features.log';
    &amp; {
        $installed = &amp; $getCommand;
        foreach( $selector in $selectors ) {
            $result = [ordered] @{
                Selector = $selector;
            };
            $found = $installed | Where-Object -FilterScript $filterCommand;
            if( $found ) {
                $result.Output = $found | &amp; $removeCommand;
                if( $? ) {
                    $result.Message = "$type removed.";
                } else {
                    $result.Message = "$type not removed.";
                    $result.Error = $Error[0];
                }
            } else {
                $result.Message = "$type not installed.";
            }
            $result | ConvertTo-Json -Depth 3 -Compress;
        }
    } *&gt;&amp;1 &gt;&gt; $logfile;
            </File>
            <File path="C:\Users\Default\AppData\Local\Microsoft\Windows\Shell\LayoutModification.xml"><![CDATA[
    <LayoutModificationTemplate Version="1" xmlns="http://schemas.microsoft.com/Start/2014/LayoutModification">
        <LayoutOptions StartTileGroupCellWidth="6" />
        <DefaultLayoutOverride>
            <StartLayoutCollection>
                <StartLayout GroupCellWidth="6" xmlns="http://schemas.microsoft.com/Start/2014/FullDefaultLayout" />
            </StartLayoutCollection>
        </DefaultLayoutOverride>
    </LayoutModificationTemplate>
            ]]></File>
        </Extensions>
    </unattend>

  sysprep.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend">
      <settings pass="oobeSystem">
        <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <AutoLogon>
            <Enabled>false</Enabled>
            <Username>Administrator</Username>
          </AutoLogon>
          <OOBE>
            <HideEULAPage>true</HideEULAPage>
            <NetworkLocation>Work</NetworkLocation>
            <ProtectYourPC>3</ProtectYourPC>
            <SkipMachineOOBE>true</SkipMachineOOBE>
            <SkipUserOOBE>true</SkipUserOOBE>
          </OOBE>
          <UserAccounts>
            <AdministratorPassword>
              <Value>{{ .Values.defaultAdminPassword }}</Value>
              <PlainText>true</PlainText>
            </AdministratorPassword>
          </UserAccounts>
          <TimeZone>{{ .Values.timeZone }}</TimeZone>
        </component>
      </settings>
    </unattend>

  post-install.ps1: |-
    Set-PSDebug -Trace 1
    #####################################
    # Perform some basic configurations #
    #####################################

    Write-Host "Performing some basic configurations"
    # Configure legacy control panel view
    Start-Process reg -Wait -ArgumentList 'add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" /v StartupPage /t REG_DWORD /d 1 /f'
    # Modify control panel icon size
    Start-Process reg -Wait -ArgumentList 'add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" /v AllItemsIconView /t REG_DWORD /d 0 /f'
    # Remove automatic admin login
    Start-Process reg -Wait -ArgumentList 'add "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoAdminLogon /t REG_SZ /d 0 /f'
    # Disable Windows SmartScreen Filter
    Start-Process reg -Wait -ArgumentList 'add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\System" /v EnableSmartScreen /t REG_DWORD /d 0 /f'
    # Prevent password expiration
    Start-Process wmic -Wait -ArgumentList 'useraccount where name="Administrator" set PasswordExpires=false'

    Write-Host "Installing additional drivers"
    # Install all remaining VirtIO drivers
    Start-Process msiexec -Wait -ArgumentList "/i E:\virtio-win-gt-x64.msi /qn /passive /norestart ADDLOCAL=FE_balloon_driver,FE_network_driver,FE_vioinput_driver,FE_viorng_driver,FE_vioscsi_driver,FE_vioserial_driver,FE_viostor_driver,FE_viofs_driver,FE_viogpudo_driver"
    # Install qemu Guest Agent
    Start-Process msiexec -Wait -ArgumentList "/i E:\guest-agent\qemu-ga-x86_64.msi /qn /passive /norestart"

    Write-Host "Enabling RDP"
    # Enable RDP
    Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
    # Disable NLA
    Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 0
    # Open firewall ports
    Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    {{ if .Values.postInstallPowershell }}
    #####################################
    # Perform custom post-install steps #
    #####################################

    Write-Host "Performing custom setup"
    {{- tpl .Values.postInstallPowershell $ | nindent 4 }}
    {{ end }}
  
    Set-PSDebug -Trace 1
    ####################################
    #     Enable WinRM for Ansible     #
    ####################################

    # Set NetConnectionProfile to Private
    Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private

    # Enable PSRemoting
    Write-Host "Enabling WinRM service"
    Enable-PSRemoting -Force

    # Allow unencrypted traffic
    Write-Host "Allowing unencrypted traffic"
    Set-Item WSMan:\localhost\Service\AllowUnencrypted -Value $true

    # Enable Basic Authentication
    Write-Host "Enabling Basic Authentication"
    Set-Item WSMan:\localhost\Service\Auth\Basic -Value $true

    # Set the WinRM service to start automatically
    Write-Host "Set WinRM service to start automatically"
    Set-Service -Name WinRM -StartupType Automatic

    # Start the WinRM service
    Write-Host "Start WinRM service"
    Start-Service -Name WinRM

    # Configure firewall to allow WinRM traffic
    Write-Host "Configuring firewall"
    netsh advfirewall firewall add rule name="Allow WinRM HTTP" dir=in action=allow protocol=TCP localport=5985

    # Dump listener config
    Write-Host "Dump listener config"
    winrm enumerate winrm/config/listener

    # Let output be confirmed
    Start-Sleep -s 10

    #####################################
    # Finalize installation via sysprep #
    #####################################

    Write-Host "Finalizaing"
    # Run sysprep
    Start-Process "C:\Windows\System32\Sysprep\sysprep.exe" -Wait -ArgumentList "/generalize /oobe /mode:vm /unattend:F:\sysprep.xml /shutdown"
