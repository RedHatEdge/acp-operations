---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-vm-from-manifest
  namespace: windows-virtualization-setup
spec:
  params:
    - default: ''
      description: YAML manifest of a VirtualMachine resource to be created.
      name: manifest
      type: string
    - default: ''
      description: Parameters for virtctl create vm command that will be used to create VirtualMachine.
      name: virtctl
      type: string
    - default: ''
      description: Namespace where to create the VM. (defaults to manifest namespace or active namespace)
      name: namespace
      type: string
    - default: ''
      description: 'Set to true or false to start / not start vm after creation. In case of runStrategy is set to Always, startVM flag is ignored.'
      name: startVM
      type: string
    - default: ''
      description: 'Set runStrategy to VM. If runStrategy is set, vm.spec.running attribute is set to nil.'
      name: runStrategy
      type: string
  results:
    - description: The name of a VM that was created.
      name: name
      type: string
    - description: The namespace of a VM that was created.
      name: namespace
      type: string
  steps:
    - args:
        - '--output=yaml'
      command:
        - create-vm
      computeResources: {}
      env:
        - name: VM_MANIFEST
          value: $(params.manifest)
        - name: VM_NAMESPACE
          value: $(params.namespace)
        - name: VIRTCTL
          value: $(params.virtctl)
        - name: START_VM
          value: $(params.startVM)
        - name: RUN_STRATEGY
          value: $(params.runStrategy)
      image: 'registry.redhat.io/container-native-virtualization/kubevirt-tekton-tasks-create-datavolume-rhel9@sha256:fd26c9fc714da67ac4967e2062afbf1ef8b4d40c68ac593e89ec1e7a15f4f688'
      name: createvm
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: cleanup-vm
  namespace: windows-virtualization-setup
spec:
  params:
    - description: Name of a VM to execute the action in.
      name: vmName
      type: string
    - default: ''
      description: Namespace of a VM to execute the action in. (defaults to active namespace)
      name: vmNamespace
      type: string
    - default: 'true'
      description: Stops the VM after executing the commands when set to true.
      name: stop
      type: string
    - default: 'false'
      description: Deletes the VM after executing the commands when set to true.
      name: delete
      type: string
    - default: 30m
      description: Timeout for the command/script (includes potential VM start). The VM will be stopped or deleted accordingly once the timout expires. Should be in a 3h2m1s format.
      name: timeout
      type: string
    - default: __empty__
      description: Secret to use when connecting to a VM.
      name: secretName
      type: string
    - default: []
      description: Command to execute in a VM.
      name: command
      type: array
    - default: []
      description: Arguments of a command.
      name: args
      type: array
    - default: ''
      description: Script to execute in a VM.
      name: script
      type: string
  steps:
    - args:
        - '--stop'
        - $(params.stop)
        - '--delete'
        - $(params.delete)
        - '--timeout'
        - $(params.timeout)
        - '--'
        - $(params.command)
        - $(params.args)
      command:
        - entrypoint
      computeResources: {}
      env:
        - name: COMMAND
          value: execute-in-vm
        - name: VM_NAME
          value: $(params.vmName)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)
        - name: EXECUTE_SCRIPT
          value: $(params.script)
        - name: CONNECTION_SECRET_NAME
          value: $(params.secretName)
      image: 'registry.redhat.io/container-native-virtualization/kubevirt-tekton-tasks-create-datavolume-rhel9@sha256:fd26c9fc714da67ac4967e2062afbf1ef8b4d40c68ac593e89ec1e7a15f4f688'
      name: execute-in-vm
      volumeMounts:
        - mountPath: /data/connectionsecret/
          name: connectionsecret
          readOnly: true
  volumes:
    - name: connectionsecret
      secret:
        optional: true
        secretName: $(params.secretName)
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: modify-data-object
  namespace: windows-virtualization-setup
spec:
  description: This task modifies a data object (DataVolume or DataSource). It can optionally wait until CDI imports finish.
  params:
    - default: ''
      description: YAML manifest of a data object to be created.
      name: manifest
      type: string
    - default: ''
      description: Namespace where to create the data object. (defaults to manifest namespace or active namespace)
      name: namespace
      type: string
    - default: 'false'
      description: Set to "true" or "false" if container should wait for Ready condition of the data object.
      name: waitForSuccess
      type: string
    - default: 'false'
      description: Allow replacing an already existing data object (same combination name/namespace). Allowed values true/false
      name: allowReplace
      type: string
    - default: 'false'
      description: 'Set to `true` or `false` if task should delete the specified DataVolume, DataSource or PersistentVolumeClaim. If set to ''true'' the ds/dv/pvc will be deleted and all other parameters are ignored.'
      name: deleteObject
      type: string
    - default: ''
      description: Kind of the data object to delete. This parameter is used only for Delete operation.
      name: deleteObjectKind
      type: string
    - default: ''
      description: Name of the data object to delete. This parameter is used only for Delete operation.
      name: deleteObjectName
      type: string
  results:
    - description: The name of the data object that was created.
      name: name
      type: string
    - description: The namespace of the data object that was created.
      name: namespace
      type: string
  steps:
    - args:
        - '--output=yaml'
      command:
        - modify-data-object
      computeResources: {}
      env:
        - name: DATA_OBJECT_MANIFEST
          value: $(params.manifest)
        - name: DATA_OBJECT_NAMESPACE
          value: $(params.namespace)
        - name: WAIT_FOR_SUCCESS
          value: $(params.waitForSuccess)
        - name: ALLOW_REPLACE
          value: $(params.allowReplace)
        - name: DELETE_OBJECT
          value: $(params.deleteObject)
        - name: DELETE_OBJECT_KIND
          value: $(params.deleteObjectKind)
        - name: DELETE_OBJECT_NAME
          value: $(params.deleteObjectName)
      image: 'registry.redhat.io/container-native-virtualization/kubevirt-tekton-tasks-create-datavolume-rhel9@sha256:fd26c9fc714da67ac4967e2062afbf1ef8b4d40c68ac593e89ec1e7a15f4f688'
      name: modify-data-object
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  namespace: windows-virtualization-setup
  annotations:
    tekton.dev/pipelines.minVersion: "0.43.0"
    tekton.dev/categories: Automation
    tekton.dev/tags: kubevirt
    tekton.dev/displayName: "KubeVirt wait for VMI status"
    tekton.dev/platforms: "linux/amd64"
    artifacthub.io/maintainers: |
      - name: KubeVirt Tekton tasks maintainers
        email: kubevirt-tekton-tasks@redhat.com
    artifacthub.io/provider: KubeVirt
    artifacthub.io/recommendations: |
      - url: https://kubevirt.io/
    artifacthub.io/category: integration-delivery
  labels:
    app.kubernetes.io/version: v0.22.0
  name: wait-for-vmi-status
spec:
  description: >-
    This tasks waits until KubeVirt virtual machine is in some 
    state. It can be used in pipeline where user needs to wait until e.g. 
    VM finish some installation.
  params:
    - name: vmiName
      description: Name of a VirtualMachineInstance to wait for.
      type: string
    - name: vmiNamespace
      description: Namespace of a VirtualMachineInstance to wait for. (defaults to manifest namespace or active namespace)
      default: ""
      type: string
    - name: successCondition
      default: ""
      description: A label selector expression to decide if the VirtualMachineInstance (VMI) is in a success state. Eg. "status.phase == Succeeded". It is evaluated on each VMI update and will result in this task succeeding if true.
    - name: failureCondition
      default: ""
      description: A label selector expression to decide if the VirtualMachineInstance (VMI) is in a failed state. Eg. "status.phase in (Failed, Unknown)". It is evaluated on each VMI update and will result in this task failing if true.
  steps:
    - name: wait-for-vmi-status
      image: "quay.io/kubevirt/tekton-tasks:v0.22.0"
      command:
        - entrypoint
      env:
        - name: COMMAND
          value: wait-for-vmi-status
        - name: VMI_NAME
          value: $(params.vmiName)
        - name: VMI_NAMESPACE
          value: $(params.vmiNamespace)
        - name: SUCCESS_CONDITION
          value: $(params.successCondition)
        - name: FAILURE_CONDITION
          value: $(params.failureCondition)